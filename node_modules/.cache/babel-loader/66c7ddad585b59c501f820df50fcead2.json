{"ast":null,"code":"var _jsxFileName = \"C:\\\\Ranjita\\\\dynamic-form-app\\\\src\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { useForm } from 'react-hook-form'; // import DatePicker from \"react-datepicker\";\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet template = {\n  form_heading: 'Form Heading',\n  form_description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi',\n  fields: [{\n    title: 'First Name',\n    type: 'text',\n    name: 'firstName',\n    id: 'firstName',\n    isMandatory: 'true',\n    validationMessage: {\n      required: 'First Name is mandatory'\n    }\n  }, {\n    title: 'Last Name',\n    type: 'text',\n    name: 'lastName',\n    id: 'lastName',\n    isMandatory: 'true',\n    validationMessage: {\n      required: 'Last Name is mandatory'\n    }\n  }, {\n    title: 'Email',\n    type: 'email',\n    name: 'email',\n    id: 'email',\n    isMandatory: 'true',\n    pattern: /\\S+@\\S+\\.\\S+/,\n    validationMessage: {\n      required: 'Email is mandatory',\n      patternMessage: \"Entered value does not match email format\"\n    }\n  }, {\n    title: 'Date of Birth',\n    type: 'datepicker',\n    name: '',\n    id: 'dob',\n    isMandatory: 'false'\n  }, {\n    title: 'Password',\n    type: 'password',\n    id: 'password',\n    name: 'password',\n    minLength: 5,\n    isMandatory: 'true',\n    validationMessage: {\n      required: 'Enter Password',\n      lengthMessage: \"Min length is 5\"\n    }\n  }, {\n    title: 'Total Experience',\n    type: 'select',\n    name: 'totExp',\n    id: 'totExp',\n    isMandatory: 'true',\n    validationMessage: {\n      required: 'Select Total Experience'\n    },\n    options: [1, 2, 3, 4, 5]\n  }, {\n    title: 'Description',\n    type: 'textarea',\n    name: 'description',\n    id: 'description',\n    isMandatory: 'true',\n    validationMessage: {\n      required: 'Please add description'\n    }\n  }]\n};\n\nconst renderFields = (formFields, register, errors) => {\n  return formFields.fields.map((field, key) => {\n    switch (field.type) {\n      case 'text':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          id: key,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: field.id,\n              children: [field.title, \" \", field.isMandatory ? '*' : '']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: `form-control`,\n              id: field.id,\n              name: field.name,\n              ...register(field.id, {\n                required: field.validationMessage.required\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), errors[field.id] && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: errors[field.id]['message']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this);\n\n      case 'email':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: field.id,\n              children: [\"Email \", field.isMandatory ? '*' : '']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              className: `form-control ${errors.email ? \"requiredField\" : \"\"}`,\n              id: field.id,\n              name: field.name,\n              ...register(field.id, {\n                required: field.validationMessage.required,\n                pattern: {\n                  value: field.pattern,\n                  message: field.validationMessage.patternMessage\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), errors[field.id] && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: errors[field.id]['message']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this);\n\n      case 'password':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: field.id,\n              children: [\"Password \", field.isMandatory ? '*' : '']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              className: `form-control ${errors.password ? \"requiredField\" : \"\"}`,\n              id: field.id,\n              name: field.name,\n              ...register(field.id, {\n                required: field.validationMessage.required,\n                minLength: {\n                  value: field.minLength,\n                  message: field.lengthMessage\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this), errors[field.id] && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: errors[field.id]['message']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this);\n\n      case 'select':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          style: {\n            paddingTop: '15px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-6\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-select\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: field.id,\n                className: \"form-label\",\n                children: \"Total Experience:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                className: `form-control ${errors.totExp ? \"requiredField\" : \"\"}`,\n                id: field.id,\n                name: field.name,\n                ...register(field.id, {\n                  required: field.validationMessage.required\n                }),\n                children: field.options.map((option, optKey) => /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: option\n                }, optKey, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 33\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 25\n              }, this), errors[field.id] && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: errors[field.id]['message']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 46\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this);\n      // case 'datepicker':\n      //     return (\n      //     )\n      // case 'select':\n      //     return (\n      //     )\n\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {}, field.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this);\n    }\n  });\n};\n\nconst Form = () => {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    setError,\n    formState: {\n      errors\n    }\n  } = useForm({\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      totExp: \"\",\n      acceptTc: \"\"\n    }\n  }); // const [startDate, setStartDate] = useState(new Date());\n  // const onSubmit = (data) => {\n  //     if(errors['firstName']) {\n  //         setError(\"firstName\",{\n  //             type:\"custom\"\n  //         })\n  //     }\n  //     if(errors['lastName']) {\n  //         setError(\"lastName\",{\n  //             type:\"custom\",\n  //         })\n  //     }\n  //     if(errors['email']) {\n  //         setError(\"email\",{\n  //             type:\"custom\",\n  //         })\n  //     }\n  //     if(errors['password']) {\n  //         setError(\"password\",{\n  //             type:\"custom\",\n  //         })\n  //     }\n  //     if(errors['totExp']) {\n  //         setError(\"totExp\",{\n  //             type:\"custom\",\n  //         })\n  //     }\n  //     if(errors['acceptTc']) {\n  //         setError(\"acceptTc\",{\n  //             type:\"custom\",\n  //         })\n  //     }\n  //     if(errors['description']) {\n  //         setError(\"description\",{\n  //             type:\"custom\",\n  //         })\n  //     }\n  // };\n\n  const onSubmit = data => {\n    console.log(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Alert, {\n      show: true,\n      variant: \"success\",\n      children: \"This is a success Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: template.form_heading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: template.form_description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form-card\",\n      method: \"post\",\n      onSubmit: handleSubmit(onSubmit),\n      children: [renderFields(template, register, errors), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group col-sm-6\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn-block btn-primary\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 51\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 13\n      }, this)]\n    }, \"formKey\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Form, \"GIBw6K/SMUjyv8wSTomsNYXcLU8=\", false, function () {\n  return [useForm];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","Alert","useForm","template","form_heading","form_description","fields","title","type","name","id","isMandatory","validationMessage","required","pattern","patternMessage","minLength","lengthMessage","options","renderFields","formFields","register","errors","map","field","key","email","value","message","password","paddingTop","totExp","option","optKey","Form","handleSubmit","setError","formState","defaultValues","firstName","lastName","acceptTc","onSubmit","data","console","log"],"sources":["C:/Ranjita/dynamic-form-app/src/Form.js"],"sourcesContent":["import React,{useState} from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport { useForm } from 'react-hook-form';\r\n\r\n// import DatePicker from \"react-datepicker\";\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nlet template = {\r\n    form_heading: 'Form Heading',\r\n    form_description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi',\r\n    fields: [\r\n        {\r\n            title: 'First Name',\r\n            type: 'text',\r\n            name: 'firstName',\r\n            id: 'firstName',\r\n            isMandatory:'true',\r\n            validationMessage: {\r\n                required: 'First Name is mandatory'\r\n            }\r\n        },\r\n        {\r\n            title: 'Last Name',\r\n            type: 'text',\r\n            name: 'lastName',\r\n            id: 'lastName',\r\n            isMandatory:'true',\r\n            validationMessage: {\r\n                required: 'Last Name is mandatory'\r\n            }\r\n        },        \r\n        {\r\n            title: 'Email',\r\n            type: 'email',\r\n            name: 'email',\r\n            id: 'email',\r\n            isMandatory:'true',\r\n            pattern: /\\S+@\\S+\\.\\S+/,\r\n            validationMessage: {\r\n                required: 'Email is mandatory',\r\n                patternMessage: \"Entered value does not match email format\"\r\n            },\r\n        },\r\n        {\r\n            title: 'Date of Birth',\r\n            type: 'datepicker',\r\n            name: '',\r\n            id: 'dob',\r\n            isMandatory:'false',\r\n        },\r\n        {\r\n            title: 'Password',\r\n            type: 'password',\r\n            id: 'password',\r\n            name: 'password',\r\n            minLength: 5,\r\n            isMandatory:'true',\r\n            validationMessage: {\r\n                required: 'Enter Password',\r\n                lengthMessage: \"Min length is 5\"\r\n            },\r\n        },\r\n        {\r\n            title: 'Total Experience',\r\n            type: 'select',\r\n            name: 'totExp',\r\n            id: 'totExp',\r\n            isMandatory:'true',\r\n            validationMessage: {\r\n                required: 'Select Total Experience'\r\n            },\r\n            options:[1,2,3,4,5],\r\n        },\r\n        {\r\n            title: 'Description',\r\n            type: 'textarea',\r\n            name: 'description',\r\n            id: 'description',\r\n            isMandatory:'true',\r\n            validationMessage: {\r\n                required: 'Please add description'\r\n            }\r\n        },\r\n        \r\n    ]\r\n}\r\nconst renderFields = (formFields,register,errors) => {\r\n    return formFields.fields.map((field,key) => {\r\n        switch (field.type) {\r\n            case 'text':\r\n                return (\r\n                    <div className=\"form-group\" id={key}>\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor={field.id}>{field.title} {field.isMandatory?'*':''}</label>\r\n                            <input type=\"text\"\r\n                                className={`form-control`} id={field.id} name={field.name}\r\n                                {...register(field.id, {\r\n                                    required: field.validationMessage.required,\r\n                                })}\r\n                            />\r\n                        </div>\r\n                        {errors[field.id] && <span>{errors[field.id]['message']}</span>}\r\n                    </div>\r\n                )\r\n            case 'email':\r\n                return (\r\n                    <div className=\"form-group\">\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor={field.id}>Email {field.isMandatory?'*':''}</label>\r\n                            <input type=\"email\" className={`form-control ${errors.email ? \"requiredField\" : \"\"}`} id={field.id} name={field.name} {...register(field.id, {\r\n                            required: field.validationMessage.required,\r\n                            pattern: {\r\n                                value: field.pattern,\r\n                                message: field.validationMessage.patternMessage,\r\n                            }\r\n                            })}/>\r\n                        </div>\r\n                        {errors[field.id] && <span>{errors[field.id]['message']}</span>}\r\n                    </div>\r\n                )\r\n            case 'password':\r\n                return (\r\n                    <div className=\"form-group\">\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor={field.id}>Password {field.isMandatory?'*':''}</label>\r\n                            <input type=\"password\" className={`form-control ${errors.password ? \"requiredField\" : \"\"}`} id={field.id} name={field.name} {...register(field.id, {\r\n                            required: field.validationMessage.required,\r\n                            minLength: {\r\n                                value: field.minLength,\r\n                                message: field.lengthMessage\r\n                            }\r\n                            })}/>\r\n                        </div>\r\n                        {errors[field.id] && <span>{errors[field.id]['message']}</span>}\r\n                    </div>\r\n                )\r\n            case 'select':\r\n                return (\r\n                    <div className=\"form-group\" style={{paddingTop:'15px'}}>\r\n                <div className=\"col-md-6\">\r\n                    <div className=\"form-select\">\r\n                        <label htmlFor={field.id} className=\"form-label\">Total Experience:</label>\r\n                        <select className={`form-control ${errors.totExp ? \"requiredField\" : \"\"}`} id={field.id} name={field.name} {...register(field.id, {\r\n                            required: field.validationMessage.required,\r\n                        })}>\r\n                           {field.options.map((option,optKey) => (\r\n                                <option key={optKey}>{option}</option>\r\n                            ))}\r\n                        \r\n                        </select>\r\n                        {errors[field.id] && <span>{errors[field.id]['message']}</span>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n                )\r\n            // case 'datepicker':\r\n            //     return (\r\n                    \r\n            //     )\r\n            // case 'select':\r\n            //     return (\r\n                    \r\n            //     )\r\n            default:\r\n                return (\r\n                    <div key={field.id}>\r\n                        {/* <span className=\"red-text\">Invalid Field</span> */}\r\n                    </div>\r\n                )\r\n        }\r\n    })\r\n}\r\nconst Form = () => {\r\n    const { register, handleSubmit, setError, formState: { errors } } = useForm({\r\n        defaultValues: {\r\n          firstName: \"\",\r\n          lastName: \"\",\r\n          email: \"\",\r\n          password: \"\",\r\n          totExp: \"\",\r\n          acceptTc: \"\"\r\n        },\r\n      });\r\n    // const [startDate, setStartDate] = useState(new Date());\r\n    // const onSubmit = (data) => {\r\n    //     if(errors['firstName']) {\r\n    //         setError(\"firstName\",{\r\n    //             type:\"custom\"\r\n    //         })\r\n    //     }\r\n    //     if(errors['lastName']) {\r\n    //         setError(\"lastName\",{\r\n    //             type:\"custom\",\r\n    //         })\r\n    //     }\r\n    //     if(errors['email']) {\r\n    //         setError(\"email\",{\r\n    //             type:\"custom\",\r\n    //         })\r\n    //     }\r\n    //     if(errors['password']) {\r\n    //         setError(\"password\",{\r\n    //             type:\"custom\",\r\n    //         })\r\n    //     }\r\n    //     if(errors['totExp']) {\r\n    //         setError(\"totExp\",{\r\n    //             type:\"custom\",\r\n    //         })\r\n    //     }\r\n    //     if(errors['acceptTc']) {\r\n    //         setError(\"acceptTc\",{\r\n    //             type:\"custom\",\r\n    //         })\r\n    //     }\r\n    //     if(errors['description']) {\r\n    //         setError(\"description\",{\r\n    //             type:\"custom\",\r\n    //         })\r\n    //     }\r\n    // };\r\n    const onSubmit = (data) => {\r\n        console.log(data)\r\n     }\r\n    return(\r\n        <>\r\n        <Alert\r\n        show={true}\r\n        variant=\"success\"\r\n      >This is a success Message</Alert>\r\n        <h2>{template.form_heading}</h2>\r\n        <p>{template.form_description}</p>\r\n        <form className=\"form-card\" method=\"post\" onSubmit={handleSubmit(onSubmit)} key=\"formKey\">\r\n            {renderFields(template,register,errors)}\r\n            \r\n            {/* <div className=\"form-group\">\r\n                <div className=\"col-md-6\">\r\n                    <label htmlFor=\"firstName\">First Name *</label>\r\n                    <input type=\"text\"\r\n                        className={`form-control ${errors.firstName ? \"requiredField\" : \"\"}`} id=\"firstName\" name=\"firstName\" {...register(\"firstName\", {\r\n                            required: 'Please Enter First Name',\r\n                        })}\r\n                    />\r\n                </div>\r\n                {errors.firstName && <span>{errors['firstName']['message']}</span>}\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <div className=\"col-md-6\">\r\n                    <label htmlFor=\"lastName\">Last Name *</label>\r\n                    <input type=\"text\" className={`form-control ${errors.lastName ? \"requiredField\" : \"\"}`}  id=\"lastName\" name=\"lastName\" {...register(\"lastName\", {\r\n                        required: 'Please Enter Last Name',\r\n                    })}/>  \r\n                </div>\r\n                {errors.lastName && <span>{errors.lastName.message}</span>}              \r\n            </div>\r\n            <div className=\"form-group\">\r\n                <div className=\"col-md-6\">\r\n                    <label htmlFor=\"dob\">Date of Birth *</label>\r\n                    <DatePicker\r\n                        selected={startDate}\r\n                        onChange={(date) => setStartDate(date)}\r\n                        maxDate={new Date()}\r\n                        showDisabledMonthNavigation\r\n                        className=\"form-control\"\r\n                        id=\"dob\"\r\n                    />\r\n                </div>\r\n                {errors.dob && <span>{errors.dob.message}</span>}              \r\n            </div>\r\n            <div className=\"form-group\">\r\n                <div className=\"col-md-6\">\r\n                <label htmlFor=\"email\">Email *</label>\r\n                <input type=\"email\" className={`form-control ${errors.email ? \"requiredField\" : \"\"}`} id=\"email\" name=\"email\" {...register(\"email\", {\r\n                required: \"Enter Email\",\r\n                pattern: {\r\n                    value: /\\S+@\\S+\\.\\S+/,\r\n                    message: \"Entered value does not match email format\"\r\n                }\r\n                })}/>\r\n                </div>\r\n            {errors.email && <span>{errors.email.message}</span>}\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <div className=\"col-md-6\">\r\n                    <label htmlFor=\"password\">Password *</label>\r\n                    <input type=\"password\" className={`form-control ${errors.password ? \"requiredField\" : \"\"}`} id=\"password\" name=\"password\" {...register(\"password\", {\r\n                    required: \"Enter Password\",\r\n                    minLength: {\r\n                        value: 5,\r\n                        message: \"min length is 5\"\r\n                    }\r\n                    })}/>\r\n                </div>\r\n            {errors.password && <span>{errors.password.message}</span>}\r\n            </div>\r\n            <div className=\"form-group\" style={{paddingTop:'15px'}}>\r\n                <div className=\"col-md-6\">\r\n                    <div className=\"form-select\">\r\n                        <label htmlFor=\"totExp\" className=\"form-label\">Total Experience:</label>\r\n                        <select className={`form-control ${errors.totExp ? \"requiredField\" : \"\"}`} id=\"totExp\" name=\"totExp\" {...register(\"totExp\", {\r\n                            required: 'Please select total experience',\r\n                        })}>\r\n                        <option>1</option>\r\n                        <option>2</option>\r\n                        <option>3</option>\r\n                        <option>4</option>\r\n                        <option>5</option>\r\n                        </select>\r\n                        {errors.totExp && <span>{errors.totExp.message}</span>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <div className=\"col-md-6\">\r\n                    <label htmlFor=\"dob\">Description </label>\r\n                    <textarea className = \"form-control\" rows = \"3\" placeholder = \"Description\" id=\"description\" name=\"description\" {...register(\"description\", {\r\n                            required: 'Please add description',\r\n                        })}></textarea>\r\n                </div>\r\n                {errors.description && <span>{errors.description.message}</span>}              \r\n            </div>\r\n            <div className=\"form-group\" style={{paddingTop:'15px'}}>\r\n                <div className=\"col-md-6\">\r\n                    <div className=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"acceptTc\" name=\"acceptTc\" {...register(\"acceptTc\", {\r\n                            required: 'Please Accept',\r\n                        })}/> <label>Accept Terms & Conditions</label>\r\n                        \r\n                    </div>\r\n                </div>\r\n                \r\n                <p>{errors.acceptTc && <span>{errors.acceptTc.message}</span>}</p>\r\n            </div> */}\r\n            \r\n            <div className=\"form-group col-sm-6\"> <button type=\"submit\" className=\"btn-block btn-primary\">Submit</button> </div>\r\n        </form>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}