{"ast":null,"code":"var _jsxFileName = \"C:\\\\Ranjita\\\\dynamic-form-app\\\\src\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { useForm } from 'react-hook-form'; // import DatePicker from \"react-datepicker\";\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet template = {\n  form_heading: 'Form Heading',\n  form_description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi',\n  fields: [{\n    title: 'First Name',\n    type: 'text',\n    name: 'firstName',\n    id: 'firstName',\n    validation: 'true',\n    validationMessage: {\n      required: 'First Name is mandatory'\n    }\n  }, {\n    title: 'Last Name',\n    type: 'text',\n    name: 'lastName',\n    id: 'lastName',\n    validation: 'true',\n    validationMessage: {\n      required: 'First Name is mandatory'\n    }\n  }, {\n    title: 'Date of Birth',\n    type: 'datepicker',\n    name: '',\n    id: 'dob',\n    validation: 'false'\n  }, {\n    title: 'Email',\n    type: 'email',\n    name: 'email',\n    validation: 'true',\n    validationMessage: {\n      required: 'Email is mandatory',\n      pattern: \"Entered value does not match email format\"\n    }\n  }, {\n    title: 'Password',\n    type: 'password',\n    name: 'password',\n    validation: 'true',\n    validationMessage: {\n      required: 'Enter Password',\n      pattern: \"Min length is 5\"\n    }\n  }, {\n    title: 'Total Experience',\n    type: 'select',\n    name: 'totExp',\n    id: 'totExp',\n    validation: 'true',\n    validationMessage: {\n      required: 'Select Total Experience'\n    }\n  }, {\n    title: 'Description',\n    type: 'textarea',\n    name: 'description',\n    id: 'description',\n    validation: 'true',\n    validationMessage: {\n      required: 'Please add description'\n    }\n  }]\n};\n\nconst renderFields = _ref => {\n  let {\n    fields: formFields\n  } = _ref;\n  console.log(fields); // return fields.map(field => {\n  //     switch (field.type) {\n  //         case 'text':\n  //             return (\n  //                 <div className=\"form-group\">\n  //                     <div className=\"col-md-6\">\n  //                         <label htmlFor={field.id}>{field.title} *</label>\n  //                         <input type=\"text\"\n  //                             className={`form-control`} id={field.id} name={field.name}\n  //                         />\n  //                     </div>\n  //                     {/* {errors.firstName && <span>{errors['firstName']['message']}</span>} */}\n  //                 </div>\n  //             )\n  //         // case 'email':\n  //         //     return (\n  //         //         <div className=\"form-group\">\n  //         //             <div className=\"col-md-6\">\n  //         //                 <label htmlFor=\"email\">Email *</label>\n  //         //                 <input type=\"email\" className={`form-control ${errors.email ? \"requiredField\" : \"\"}`} id=\"email\" name=\"email\" {...register(\"email\", {\n  //         //                 required: \"Enter Email\",\n  //         //                 pattern: {\n  //         //                     value: /\\S+@\\S+\\.\\S+/,\n  //         //                     message: \"Entered value does not match email format\"\n  //         //                 }\n  //         //                 })}/>\n  //         //             </div>\n  //         //             {errors.email && <span>{errors.email.message}</span>}\n  //         //         </div>\n  //         //     )\n  //         // case 'password':\n  //         //     return (\n  //         //     )\n  //         // case 'datepicker':\n  //         //     return (\n  //         //     )\n  //         // case 'select':\n  //         //     return (\n  //         //     )\n  //         default:\n  //             return (\n  //                 <div key={field.id}>\n  //                     <span className=\"red-text\">Invalid Field</span>\n  //                 </div>\n  //             )\n  //     }\n  // })\n};\n\nconst Form = () => {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    setError,\n    formState: {\n      errors\n    }\n  } = useForm({\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      totExp: [],\n      acceptTc: \"\"\n    }\n  }); // const [startDate, setStartDate] = useState(new Date());\n  // const onSubmit = (data) => {\n  //     if(errors['firstName']) {\n  //         setError(\"firstName\",{\n  //             type:\"custom\"\n  //         })\n  //     }\n  //     if(errors['lastName']) {\n  //         setError(\"lastName\",{\n  //             type:\"custom\",\n  //         })\n  //     }\n  //     if(errors['email']) {\n  //         setError(\"email\",{\n  //             type:\"custom\",\n  //         })\n  //     }\n  //     if(errors['password']) {\n  //         setError(\"password\",{\n  //             type:\"custom\",\n  //         })\n  //     }\n  //     if(errors['totExp']) {\n  //         setError(\"totExp\",{\n  //             type:\"custom\",\n  //         })\n  //     }\n  //     if(errors['acceptTc']) {\n  //         setError(\"acceptTc\",{\n  //             type:\"custom\",\n  //         })\n  //     }\n  //     if(errors['description']) {\n  //         setError(\"description\",{\n  //             type:\"custom\",\n  //         })\n  //     }\n  // };\n\n  const onSubmit = data => {\n    console.log(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Alert, {\n      show: true,\n      variant: \"success\",\n      children: \"This is a success Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: template.form_heading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: template.form_description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form-card\",\n      method: \"post\",\n      onSubmit: handleSubmit(onSubmit),\n      children: [\"aa  \", renderFields(template), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group col-sm-6\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn-block btn-primary\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 51\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Form, \"GIBw6K/SMUjyv8wSTomsNYXcLU8=\", false, function () {\n  return [useForm];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","Alert","useForm","template","form_heading","form_description","fields","title","type","name","id","validation","validationMessage","required","pattern","renderFields","formFields","console","log","Form","register","handleSubmit","setError","formState","errors","defaultValues","firstName","lastName","email","password","totExp","acceptTc","onSubmit","data"],"sources":["C:/Ranjita/dynamic-form-app/src/Form.js"],"sourcesContent":["import React,{useState} from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport { useForm } from 'react-hook-form';\r\n\r\n// import DatePicker from \"react-datepicker\";\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nlet template = {\r\n    form_heading: 'Form Heading',\r\n    form_description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi',\r\n    fields: [\r\n        {\r\n            title: 'First Name',\r\n            type: 'text',\r\n            name: 'firstName',\r\n            id: 'firstName',\r\n            validation:'true',\r\n            validationMessage: {\r\n                required: 'First Name is mandatory'\r\n            }\r\n        },\r\n        {\r\n            title: 'Last Name',\r\n            type: 'text',\r\n            name: 'lastName',\r\n            id: 'lastName',\r\n            validation:'true',\r\n            validationMessage: {\r\n                required: 'First Name is mandatory'\r\n            }\r\n        },\r\n        {\r\n            title: 'Date of Birth',\r\n            type: 'datepicker',\r\n            name: '',\r\n            id: 'dob',\r\n            validation:'false',\r\n        },\r\n        {\r\n            title: 'Email',\r\n            type: 'email',\r\n            name: 'email',\r\n            validation:'true',\r\n            validationMessage: {\r\n                required: 'Email is mandatory',\r\n                pattern: \"Entered value does not match email format\"\r\n            },\r\n        },\r\n        {\r\n            title: 'Password',\r\n            type: 'password',\r\n            name: 'password',\r\n            validation:'true',\r\n            validationMessage: {\r\n                required: 'Enter Password',\r\n                pattern: \"Min length is 5\"\r\n            },\r\n        },\r\n        {\r\n            title: 'Total Experience',\r\n            type: 'select',\r\n            name: 'totExp',\r\n            id: 'totExp',\r\n            validation:'true',\r\n            validationMessage: {\r\n                required: 'Select Total Experience'\r\n            }\r\n        },\r\n        {\r\n            title: 'Description',\r\n            type: 'textarea',\r\n            name: 'description',\r\n            id: 'description',\r\n            validation:'true',\r\n            validationMessage: {\r\n                required: 'Please add description'\r\n            }\r\n        },\r\n        \r\n    ]\r\n}\r\n\r\nconst renderFields = ({fields : formFields}) => {\r\n    console.log(fields)\r\n    // return fields.map(field => {\r\n        \r\n    //     switch (field.type) {\r\n    //         case 'text':\r\n    //             return (\r\n    //                 <div className=\"form-group\">\r\n    //                     <div className=\"col-md-6\">\r\n    //                         <label htmlFor={field.id}>{field.title} *</label>\r\n    //                         <input type=\"text\"\r\n    //                             className={`form-control`} id={field.id} name={field.name}\r\n    //                         />\r\n    //                     </div>\r\n    //                     {/* {errors.firstName && <span>{errors['firstName']['message']}</span>} */}\r\n    //                 </div>\r\n    //             )\r\n    //         // case 'email':\r\n    //         //     return (\r\n    //         //         <div className=\"form-group\">\r\n    //         //             <div className=\"col-md-6\">\r\n    //         //                 <label htmlFor=\"email\">Email *</label>\r\n    //         //                 <input type=\"email\" className={`form-control ${errors.email ? \"requiredField\" : \"\"}`} id=\"email\" name=\"email\" {...register(\"email\", {\r\n    //         //                 required: \"Enter Email\",\r\n    //         //                 pattern: {\r\n    //         //                     value: /\\S+@\\S+\\.\\S+/,\r\n    //         //                     message: \"Entered value does not match email format\"\r\n    //         //                 }\r\n    //         //                 })}/>\r\n    //         //             </div>\r\n    //         //             {errors.email && <span>{errors.email.message}</span>}\r\n    //         //         </div>\r\n    //         //     )\r\n    //         // case 'password':\r\n    //         //     return (\r\n                    \r\n    //         //     )\r\n    //         // case 'datepicker':\r\n    //         //     return (\r\n                    \r\n    //         //     )\r\n    //         // case 'select':\r\n    //         //     return (\r\n                    \r\n    //         //     )\r\n    //         default:\r\n    //             return (\r\n    //                 <div key={field.id}>\r\n    //                     <span className=\"red-text\">Invalid Field</span>\r\n    //                 </div>\r\n    //             )\r\n    //     }\r\n    // })\r\n}\r\nconst Form = () => {\r\n    const { register, handleSubmit, setError, formState: { errors } } = useForm({\r\n        defaultValues: {\r\n          firstName: \"\",\r\n          lastName: \"\",\r\n          email: \"\",\r\n          password: \"\",\r\n          totExp: [],\r\n          acceptTc: \"\"\r\n        },\r\n      });\r\n    // const [startDate, setStartDate] = useState(new Date());\r\n    // const onSubmit = (data) => {\r\n    //     if(errors['firstName']) {\r\n    //         setError(\"firstName\",{\r\n    //             type:\"custom\"\r\n    //         })\r\n    //     }\r\n    //     if(errors['lastName']) {\r\n    //         setError(\"lastName\",{\r\n    //             type:\"custom\",\r\n    //         })\r\n    //     }\r\n    //     if(errors['email']) {\r\n    //         setError(\"email\",{\r\n    //             type:\"custom\",\r\n    //         })\r\n    //     }\r\n    //     if(errors['password']) {\r\n    //         setError(\"password\",{\r\n    //             type:\"custom\",\r\n    //         })\r\n    //     }\r\n    //     if(errors['totExp']) {\r\n    //         setError(\"totExp\",{\r\n    //             type:\"custom\",\r\n    //         })\r\n    //     }\r\n    //     if(errors['acceptTc']) {\r\n    //         setError(\"acceptTc\",{\r\n    //             type:\"custom\",\r\n    //         })\r\n    //     }\r\n    //     if(errors['description']) {\r\n    //         setError(\"description\",{\r\n    //             type:\"custom\",\r\n    //         })\r\n    //     }\r\n    // };\r\n    const onSubmit = (data) => {\r\n        console.log(data)\r\n     }\r\n    return(\r\n        <>\r\n        <Alert\r\n        show={true}\r\n        variant=\"success\"\r\n      >This is a success Message</Alert>\r\n        <h2>{template.form_heading}</h2>\r\n        <p>{template.form_description}</p>\r\n        <form className=\"form-card\" method=\"post\" onSubmit={handleSubmit(onSubmit)}>\r\n          aa  {renderFields(template)}\r\n            \r\n            {/* <div className=\"form-group\">\r\n                <div className=\"col-md-6\">\r\n                    <label htmlFor=\"firstName\">First Name *</label>\r\n                    <input type=\"text\"\r\n                        className={`form-control ${errors.firstName ? \"requiredField\" : \"\"}`} id=\"firstName\" name=\"firstName\" {...register(\"firstName\", {\r\n                            required: 'Please Enter First Name',\r\n                        })}\r\n                    />\r\n                </div>\r\n                {errors.firstName && <span>{errors['firstName']['message']}</span>}\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <div className=\"col-md-6\">\r\n                    <label htmlFor=\"lastName\">Last Name *</label>\r\n                    <input type=\"text\" className={`form-control ${errors.lastName ? \"requiredField\" : \"\"}`}  id=\"lastName\" name=\"lastName\" {...register(\"lastName\", {\r\n                        required: 'Please Enter Last Name',\r\n                    })}/>  \r\n                </div>\r\n                {errors.lastName && <span>{errors.lastName.message}</span>}              \r\n            </div>\r\n            <div className=\"form-group\">\r\n                <div className=\"col-md-6\">\r\n                    <label htmlFor=\"dob\">Date of Birth *</label>\r\n                    <DatePicker\r\n                        selected={startDate}\r\n                        onChange={(date) => setStartDate(date)}\r\n                        maxDate={new Date()}\r\n                        showDisabledMonthNavigation\r\n                        className=\"form-control\"\r\n                        id=\"dob\"\r\n                    />\r\n                </div>\r\n                {errors.dob && <span>{errors.dob.message}</span>}              \r\n            </div>\r\n            <div className=\"form-group\">\r\n                <div className=\"col-md-6\">\r\n                <label htmlFor=\"email\">Email *</label>\r\n                <input type=\"email\" className={`form-control ${errors.email ? \"requiredField\" : \"\"}`} id=\"email\" name=\"email\" {...register(\"email\", {\r\n                required: \"Enter Email\",\r\n                pattern: {\r\n                    value: /\\S+@\\S+\\.\\S+/,\r\n                    message: \"Entered value does not match email format\"\r\n                }\r\n                })}/>\r\n                </div>\r\n            {errors.email && <span>{errors.email.message}</span>}\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <div className=\"col-md-6\">\r\n                    <label htmlFor=\"password\">Password *</label>\r\n                    <input type=\"password\" className={`form-control ${errors.password ? \"requiredField\" : \"\"}`} id=\"password\" name=\"password\" {...register(\"password\", {\r\n                    required: \"Enter Password\",\r\n                    minLength: {\r\n                        value: 5,\r\n                        message: \"min length is 5\"\r\n                    }\r\n                    })}/>\r\n                </div>\r\n            {errors.password && <span>{errors.password.message}</span>}\r\n            </div>\r\n            <div className=\"form-group\" style={{paddingTop:'15px'}}>\r\n                <div className=\"col-md-6\">\r\n                    <div className=\"form-select\">\r\n                        <label htmlFor=\"totExp\" className=\"form-label\">Total Experience:</label>\r\n                        <select className={`form-control ${errors.totExp ? \"requiredField\" : \"\"}`} id=\"totExp\" name=\"totExp\" {...register(\"totExp\", {\r\n                            required: 'Please select total experience',\r\n                        })}>\r\n                        <option>1</option>\r\n                        <option>2</option>\r\n                        <option>3</option>\r\n                        <option>4</option>\r\n                        <option>5</option>\r\n                        </select>\r\n                        {errors.totExp && <span>{errors.totExp.message}</span>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <div className=\"col-md-6\">\r\n                    <label htmlFor=\"dob\">Description </label>\r\n                    <textarea className = \"form-control\" rows = \"3\" placeholder = \"Description\" id=\"description\" name=\"description\" {...register(\"description\", {\r\n                            required: 'Please add description',\r\n                        })}></textarea>\r\n                </div>\r\n                {errors.description && <span>{errors.description.message}</span>}              \r\n            </div>\r\n            <div className=\"form-group\" style={{paddingTop:'15px'}}>\r\n                <div className=\"col-md-6\">\r\n                    <div className=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"acceptTc\" name=\"acceptTc\" {...register(\"acceptTc\", {\r\n                            required: 'Please Accept',\r\n                        })}/> <label>Accept Terms & Conditions</label>\r\n                        \r\n                    </div>\r\n                </div>\r\n                \r\n                <p>{errors.acceptTc && <span>{errors.acceptTc.message}</span>}</p>\r\n            </div> */}\r\n            \r\n            <div className=\"form-group col-sm-6\"> <button type=\"submit\" className=\"btn-block btn-primary\">Submit</button> </div>\r\n        </form>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}